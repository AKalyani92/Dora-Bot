{
  "_args": [
    [
      {
        "raw": "odata",
        "scope": null,
        "escapedName": "odata",
        "name": "odata",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "E:\\Chatbot Innojam\\Bot-Skype\\Dora-Bot"
    ]
  ],
  "_from": "odata@latest",
  "_id": "odata@0.3.4",
  "_inCache": true,
  "_location": "/odata",
  "_nodeVersion": "8.1.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/odata-0.3.4.tgz_1501496874827_0.5254615382291377"
  },
  "_npmUser": {
    "name": "janhommes",
    "email": "jan@blogno.de"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "odata",
    "scope": null,
    "escapedName": "odata",
    "name": "odata",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/odata/-/odata-0.3.4.tgz",
  "_shasum": "1c33951eddc23c5d4a8af0ee9c8389f2ac407a31",
  "_shrinkwrap": null,
  "_spec": "odata",
  "_where": "E:\\Chatbot Innojam\\Bot-Skype\\Dora-Bot",
  "author": {
    "name": "Jan Hommes"
  },
  "bugs": {
    "url": "https://github.com/janhommes/o.js/issues"
  },
  "contributors": [
    {
      "name": "Matteo Antony Mistretta",
      "email": "antony.mistretta@gmail.com",
      "url": "http://www.ingloriouscoderz.it"
    }
  ],
  "dependencies": {
    "jslint": "^0.10.3",
    "q": "^1.5.0",
    "xhr2": "^0.1.4 "
  },
  "description": "o.js is a client side Odata Javascript library to simplify the request of data. The main goal is to build a standalone, lightweight and easy to understand Odata lib.",
  "devDependencies": {
    "jasmine": "*",
    "uglify-js": "*"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-8yJ4pFVqqqV5q6cJc8xKMxsVSCrtJl3EcolygSqwcW/dpITtqPBKS3a3ZH4s4DBr5wQI+IgxECmds2gn1iZ2dA==",
    "shasum": "1c33951eddc23c5d4a8af0ee9c8389f2ac407a31",
    "tarball": "https://registry.npmjs.org/odata/-/odata-0.3.4.tgz"
  },
  "eslintConfig": {
    "env": {
      "browser": true
    }
  },
  "gitHead": "7ae26fdc8577a59f0014cdddff887cca98a3dada",
  "homepage": "https://github.com/janhommes/o.js#readme",
  "license": "MIT",
  "main": "o.js",
  "maintainers": [
    {
      "name": "euforic",
      "email": "cs@bodhi5.com"
    },
    {
      "name": "iceonfire",
      "email": "antony.mistretta@gmail.com"
    },
    {
      "name": "janhommes",
      "email": "jan@blogno.de"
    }
  ],
  "name": "odata",
  "optionalDependencies": {},
  "readme": "# o.js\n\n_o.js beta v0.3.3_\n\no.js is a client side Odata Javascript library to simplify the request of data. The main goal is to build a **standalone, lightweight and easy** to understand Odata lib.\n\n## Install\n\nDownload the _o.js_ or _o.min.js_ file or install it via _bower_:\n\n```\nbower install o.js\n```\n\nThen you can add the script into your file (`<script src=\"bower_components/o.js/o.js\"></script>`), or load it with your favorite AMD loader:\n\n```javascript\nrequire.config({paths: {'odata': 'bower_components/o.js/o'}});\ndefine(['odata'], function(o) {...});\n```\n\nYou can use o.js in node.js as well, by installing the `odata` package:\n\n```\nnpm install odata\n```\n\n```javascript\nvar o = require('odata');\n```\n\n## Samples\n\nFor all samples we are using the test odata service from [Odata.org](http://www.odata.org). You can find the metadata of this service [here](http://services.odata.org/V4/OData/OData.svc).\n\n### Simple Odata query with o.js\n\n```javascript\no('http://services.odata.org/V4/OData/OData.svc/Products').get(function(data) {\n  console.log(data); //returns an array of Product data\n});\n```\n\no.js uses a jQuery like syntax to determine which resource you want to access. You can define any Odata service url (or any json web service) in the o-function: `o('<your odata service resource>')`. This only holds a handler to this resource and doesn't start the ajax call. If you want to get the resource, you need to call `.get()`. Get accepts a function callback which contains the data as the first parameter.\n\n### Methods\n\nBy adding some chained functions to the o-handler you can add query options:\n\n```javascript\no('http://services.odata.org/V4/OData/OData.svc/Products').take(5).skip(2).get(function(data) {\n  console.log(data); //An array of 5 products skipped by 2\n});\n```\n\n### Routing\n\nYou can use hash routes to map your Odata service endpoint to your website:\n\n```javascript\no('http://services.odata.org/V4/OData/OData.svc/Products').find(':0').route('Product/Detail/:0/:1',function(data) {\n  console.log('Route Product/Detail/'+this.param[0]+'/'+this.param[1]+' triggered. Result:');\n  console.log(data);\n});\n```\n\nInstead of manual getting your data with the `get()` function, this routing function always returns the data when somebody navigates to an URL with the hash value `index.html#Product/Detail/1/Some more parameter`. The `find()` method automatically maps the right parameter (in this example _1_). [See this](https://github.com/janhommes/o.js/tree/master/example) demonstration for more examples.\n\n### Get data (details)\n\nIf you want to get data you need to call the `get()` function. This functions returns an async callback function which holds an array as it's parameter. If you use `first()` or the `find()` method it only returns the data because an array is not needed. You can also save your o-function to call it later:\n\n```javascript\nvar oHandler = o('http://services.odata.org/V4/OData/OData.svc/Products');\n//do something\noHandler.find(1);\n// do some more\n\n//get the data\noHandler.get(function(data) {\n  console.log(data);\n  //or the saved var also contains the data:\n  console.log(oHandler.data);\n});\n```\n\nIf you need to get several data you can use promise. Currently o.js only supports [q.js](https://github.com/kriskowal/q). The following example show how you can get the data of two different resources:\n\n```javascript\nQ.all([\n  o('http://services.odata.org/V4/OData/OData.svc/Products(4)').get(),\n  o('http://services.odata.org/V4/OData/OData.svc/Categories').take(2).get()\n]).then(function(oHandlerArray) {\n  //The oHandler array contains the Product oHandler and the Group oHandler:\n  oHandlerArray[0].data); // 1 Product with id 4\n  oHandlerArray[1].data.length); // 2 Categories\n});\n```\n\nYou can also use promise for only one resource. The main advantage is, that you can use a fail-function:\n\n```javascript\no('http://services.odata.org/V4/OData/OData.svc/Products(2)').get().then(function(oHandler) {\n  console.log(oHandler.data);\n}).fail(function(ex) {\n  console.log(ex);\n});\n```\n\n## Add and change data\n\nTo add and change data you can use the http verb in combination with the `save()` method:\n\n### Post:\n\nYou can use the `post()` function in combination with the `save()` method to add data:\n\n```javascript\no('http://services.odata.org/V4/OData/OData.svc/Products').post({Name:'Example 1',Description:'a'}).post({Name:'Example 2',Description:'b'}).save(function(data) {\n  console.log(\"Two Products added\");\n});\n```\n\n### Patch/Put:\n\nChanging (PATCH or PUT) data is nearly the same:\n\n```javascript\no('http://services.odata.org/V4/OData/OData.svc/Products(1)').patch({Name:'NewName'}).save(function(data) {\n  console.log(\"Product Name changed\");\n});\n```\n\n### Delete:\n\nTo remove (DELETE) data you need to call `remove()`:\n\n```javascript\no('http://services.odata.org/V4/OData/OData.svc/Products(1)').remove().save(function(data) {\n  console.log(\"Product deleted\");\n});\n```\n\n### Reference:\n\nTo add an reference to an other resource use `ref` (to remove it simply use `removeRef` the same way):\n\n```javascript\no('http://services.odata.org/V4/OData/OData.svc/Products(1)').ref('Categories', 2).save(function(data) {\n  console.log(\"Product(1) associated with Categories(2)\");\n});\n```\n\nYou can also combine a single data request (`first()` or `find()`) with the save method and chain it:\n\n```javascript\no('http://services.odata.org/V4/OData/OData.svc/Products').find(2).get().then(function(oHandler) {\n  oHandler.data.Name=\"NewName\";\n  return(o.save());\n}).then(function(oHandler) {\n  console.log(oHandler.data.Name); //NewName\n}).fail(function(ex) {\n  console.log(\"error\");\n});\n```\n\n### Endpoint configuration\n\nYou can configure a endpoint with the `o().config()` function. This configuration is persistent over all off your o.js calls. Example:\n\n```javascript\n// set an endpoint\no().config({\n  endpoint:'http://services.odata.org/V4/OData/OData.svc'\n});\n\n// after you have set an endpoint, you can shorten your queries:\no('Products').get(function(data) {\n  //same result like the first example on this page\n});\n```\n\nHowever, if you have set an endpoint you can still do a full endpoint request for example to another domain `o('http://odata.example.de/Customer')`. With this function you can also do some more basic configs:\n\n```javascript\n//basic config\no().config({\n    endpoint: null,   // The default endpoint to use.\n    format: 'json', \t// The media format. Default is JSON.\n    autoFormat: true,   // Will always append a $format=json to each query if set to true.\n    version: 4, \t\t// currently only tested for Version 4. Most will work in version 3 as well.\n    strictMode: true, \t// strict mode throws exception, non strict mode only logs them\n    start: null, \t\t// a function which is executed on loading\n    ready: null,\t\t// a function which is executed on ready\n    error: null,\t\t// a function which is executed on error\n    headers: [],\t\t// an array of additional headers [{name:'headername',value:'headervalue'}]\n    username: null, \t// the basic auth username\n    password: null,\t\t// the basic auth password\n    isAsync: true\t\t// set this to false to enable sync requests. Only usable without basic auth\n});\n```\n\n### Full list of supported functions\n\nCurrently the following queries are supported:\n\n`.find(int)` - returns the object with the given id. (Odata: Products_(1)_)\n\n`.top(int)` - returns the top x objects (Odata: Products/?_$top=2_) - Synonym: `.take`\n\n`.skip(int)` - returns the objects skipped by the given value (Odata: Products/?_$skip=2_)\n\n`.first()` - returns the first object which is found (Odata: Products/?_$top=1_)\n\n`.filter(string)` - adds a filter string (o.js can converted simple JS-Syntax. If you need something complex use the plain Odata $filter syntax: [see the Odata doc](http://www.odata.org/documentation/odata-version-3-0/url-conventions/) for more information) (Odata: Products/?_$filter=Name eq 'Example'_) - Synonym: `.where`\n\n`.any(string, string)` - applies an any filter to an resource (Odata: Products/?_$filter=Categories/any(x:x/Name eq 'Test')_)\n\n`.search(array, string)` - builds up a search $filter. The first parameter defines the columns to search in the second the search word (e.g.: `.search(['Name', 'Description'], 'Test')`)\n\n`.orderBy(string, direction)` - orders the data (Odata: Products/?_$orderBy=Name_)\n\n`.orderByDesc(string)` - orders the data descending (Odata: Products/?_$orderBy=Name_)\n\n`.count()` - only counts the result (Odata: Products/_$count_)\n\n`.inlineCount(string)` - adds a inlinecount to the result. (Odata: Products/?_$count=true_)\n\n`.batch(string)` - adds a second resource to the request (Odata: $batch)\n\n`.expand(string)` - expands a related resource (Odata: Products/?_$expand=ProductUnit_)\n\n`.ref(string, string)` - expands a related resource (Odata: Products/_$ref=Categories(1)_)\n\n`.deleteRef(string, string)` - expands a related resource (Odata: Products/_$ref=Categories(1)_)\n\n`.post(object)` - Post data to an endpoint\n\n`.patch(object)` - PATCH data on an endpoint\n\n`.put(object)` - PUT data on an endpoint\n\n`.remove(object)` - DELETE data on an endpoint (You must define only one resource: e.g: Products(1) )\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/janhommes/o.js.git"
  },
  "scripts": {
    "test": "jasmine",
    "uglify": "uglifyjs --compress --mangle -o o.min.js o.js"
  },
  "version": "0.3.4"
}
